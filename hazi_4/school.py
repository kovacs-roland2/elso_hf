# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L7CIfBoMkwJ4Sy_dnw50SBnL2Zpfvy2d
"""

from datetime import datetime

today = datetime.today()
year_today = today.year

class IterPerson(type):
    def __iter__(cls):
        return iter(cls._allPeople)

class Person():
  def __init__(self, name, birth_year, gender):
    self.name = name
    self.birth_year = birth_year
    self.gender = gender

  def ask_year(self):
    return f"{self.name} is {year_today - self.birth_year} years old."

class Student(Person, metaclass=IterPerson):
  _allPeople = []

  def __init__(self, name, birth_year, gender, average, parent_tel):
    super(Student, self).__init__(name, birth_year, gender)
    self.average = average
    self.parent_tel = parent_tel
    self._allPeople.append(self)

  def disp_name(self):
    return self.name, self.average

class Classs():
  def __init__(self, name, students):
    self.name = name
    self.students = students

  def disp_name(self):
    return self.name
  
  def disp_stud(self):
    students_ar = []
    for student in self.students:
      name, average = student.disp_name()
      students_ar.append([name, average])
    return students_ar

class Subject():
  def __init__(self, sub_name, description, classs):
    self.sub_name = sub_name
    self.description = description
    self.classs = classs

  def disp_classs(self):
    classs_name = self.classs.disp_name()
    students_ar = self.classs.disp_stud()
    return classs_name, students_ar

class Teacher(Person):
    def __init__(self, name, birth_year, gender, subject, weekly_hour, wage_hour):
        super(Teacher, self).__init__(name, birth_year, gender)
        self.subject = subject
        self.weekly_hour = weekly_hour
        self.wage_hour = wage_hour

    def calculate_wage(self):
        wage = self.weekly_hour * self.wage_hour * 4
        print(f"{self.name}'s monthly wage is {wage}.")
        return wage

    def disp_classs(self):
      sum = 0
      classs_name, students_ar = self.subject.disp_classs()
      for student in students_ar:
        sum += student[1]
        avg = sum//len(students_ar)
      print(f"The average of the student's average is {avg} at {self.name}.")
      return classs_name, students_ar

class HeadTeacher(Teacher):
  def __init__(self, name, birth_year, gender, subject, weekly_hour, wage_hour, classs):
    super(HeadTeacher, self).__init__(name, birth_year, gender, subject, weekly_hour, wage_hour)
    self.classs = classs

  def calc_classs_average(self):
    sum = 0
    students_ar = self.classs.disp_stud()
    for student in students_ar:
      sum +=  student[1]
      avg = sum//len(students_ar)
    print(f"The average of the average in the {self.name}'s class is {avg}.")
    return students_ar


class Director(Teacher):
    def __init__(self, name, birth_year, gender, subject, weekly_hour, wage_hour, bonus):
        super(Director, self).__init__(name, birth_year, gender, subject, weekly_hour, wage_hour)
        self.bonus = bonus

    def calculate_wage(self):
         wage = self.weekly_hour * self.wage_hour * 4 + self.bonus
         print(f"{self.name}'s monthly wage is {wage}.")
         return wage

class School():
  def __init__(self, students, teachers, headteachers, director, name, address):
    self.students = students
    self.teachers = teachers
    self.headteachers = headteachers
    self.director = director
    self.name = name 
    self.address = address

  def calculate_wages(self):
    teach_wage = 0
    head_wage = 0
    for teacher in self.teachers:
       teach_wage += int(teacher.calculate_wage())
    for headteacher in self.headteachers:
        head_wage += int(headteacher.calculate_wage())
    dir_wage = int(self.director.calculate_wage())
    sum_wage = dir_wage + teach_wage + head_wage
    print(f"The sum of the wages is: {sum_wage}.")

Pisti = Person('Pisti', 1996, 'Male')
print(Pisti.ask_year())

Józsi = Student('Józsi', 2000, 'Male', 3.6, "34435234322")
Totya = Student('Totya', 2000, 'Male', 4.2, "34477234322")
Lajos = Student('Lajos', 2001, 'Male', 5.0, "34665234322")
Süsü = Student('Süsü', 2000, 'Male', 3.6, "34435234322")
Lüke = Student('Lüke', 2000, 'Male', 4.2, "34477234322")
Cickány = Student('Cickány', 2001, 'Male', 5.0, "34665234322")
Pató = Student('Pató', 2000, 'Male', 3.3, "34435234322")
Kali = Student('Kali', 2000, 'Male', 4.8, "34477234322")
Laki = Student('Laki', 2001, 'Male', 3.7, "34665234322")
Tutu = Student('Tutu', 2001, 'Male', 2.0, "34665234322")

worst_avg, worst_name = min([(stud.average, stud.name) for stud in Student])
print(f"The worst avg is: {worst_avg} by {worst_name}")

a8 = Classs('8a', [Józsi, Totya,Tutu])
b8 = Classs('8b', [Lajos,Kali,Laki])
c8 = Classs('c8', [Süsü,Lüke,Cickány,Pató])

Math = Subject('Math', 'basic math', a8)
PI = Subject('PI', 'fegyencedzés', b8)
Geo = Subject('Geo', 'description', c8)

Teacher1 = Teacher('Mari', 1950, 'Female', Math, 10, 2000)
Teacher2 = Teacher('Sanyi', 1977, 'Male', PI, 15,2000)
Teacher3 = Teacher('Móricz', 1968, 'Male', Geo, 20, 1800)

Teacher1.calculate_wage()
Teacher2.calculate_wage()
Teacher3.calculate_wage()

Teacher1.disp_classs()
Teacher2.disp_classs()
Teacher3.disp_classs()

HeadTeacher1 = HeadTeacher('Kati', 1960, 'Female', PI, 5, 1000, a8)
HeadTeacher2 = HeadTeacher('Papi', 1965, 'Female', Math, 10, 2000, b8)
HeadTeacher3 = HeadTeacher('Mami', 1970, 'Female', Geo, 15, 2000, c8)

HeadTeacher1.calculate_wage()
HeadTeacher2.calculate_wage()
HeadTeacher3.calculate_wage()

HeadTeacher1.calc_classs_average()
HeadTeacher2.calc_classs_average()
HeadTeacher3.calc_classs_average()

Roli = Director('Roli', 1970, 'Male', 'Physics', 3, 5000, 100000)

Roli.calculate_wage()

Konyves = School([Józsi, Totya, Lajos,Süsü,Lüke,Cickány,Pató,Kali,Laki,Tutu]
                 ,[Teacher1, Teacher2, Teacher3]
                 ,[HeadTeacher1,HeadTeacher2,HeadTeacher3]
                 ,Roli
                 , 'Könyves Kálmán Ált. Isk.'
                 , '3533 Mc., Könyves utca 6.')
Konyves.calculate_wages()

#new students:
Józsi = Student('Józsi', 2000, 'Male', 3.6, "34435234322")
Totya = Student('Totya', 2000, 'Male', 4.2, "34477234322")
Lajos = Student('Lajos', 2001, 'Male', 5.0, "34665234322")
Süsü = Student('Süsü', 2000, 'Male', 3.6, "34435234322")
Lüke = Student('Lüke', 2000, 'Male', 4.2, "34477234322")
Cickány = Student('Cickány', 2001, 'Male', 5.0, "34665234322")
Pató = Student('Pató', 2000, 'Male', 3.3, "34435234322")
Kali = Student('Kali', 2000, 'Male', 4.8, "34477234322")
Laki = Student('Laki', 2001, 'Male', 3.7, "34665234322")
Tutu = Student('Tutu', 2001, 'Male', 2.0, "34665234322")
Pat = Student('Pat', 2000, 'Male', 3.3, "34435234322")
Kal = Student('Kal', 2000, 'Male', 4.8, "34477234322")
Lak = Student('Lak', 2001, 'Male', 1.7, "34665234322")
Tut = Student('Tut', 2001, 'Male', 2.0, "34665234322")

worst_avg, worst_name = min([(stud.average, stud.name) for stud in Student])
print(f"The worst avg is: {worst_avg} by {worst_name}")

a8 = Classs('8a', [Józsi, Totya,Tutu,Tut,Lak, Kal, Pat])
b8 = Classs('8b', [Lajos,Kali,Laki])
c8 = Classs('c8', [Süsü,Lüke,Cickány,Pató])

Math = Subject('Math', 'basic math', a8)
PI = Subject('PI', 'fegyencedzés', b8)
Geo = Subject('Geo', 'description', c8)

Teacher1 = Teacher('Mari', 1950, 'Female', Math, 10, 2000)
Teacher2 = Teacher('Sanyi', 1977, 'Male', PI, 15,2000)
Teacher3 = Teacher('Móricz', 1968, 'Male', Geo, 20, 1800)
Teacher4 = Teacher('Móriczka', 1969, 'Female', Geo, 30, 1500)

Teacher1.calculate_wage()
Teacher2.calculate_wage()
Teacher3.calculate_wage()
Teacher4.calculate_wage()

Teacher1.disp_classs()
Teacher2.disp_classs()
Teacher3.disp_classs()
Teacher4.disp_classs()

Roli = Director('Roli', 1970, 'Male', 'Physics', 3, 5000, 100000)

Roli.calculate_wage()

Konyves = School([Józsi, Totya, Lajos,Süsü,Lüke,Cickány,Pató,Kali,Laki,Tutu,Pat,Kal,Lak,Tut]
                 ,[Teacher1, Teacher2, Teacher3, Teacher4]
                 ,[HeadTeacher1,HeadTeacher2,HeadTeacher3]
                 ,Roli
                 , 'Könyves Kálmán Ált. Isk.'
                 , '3533 Mc., Könyves utca 6.')
Konyves.calculate_wages()